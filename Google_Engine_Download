var s2_2A = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");

var Nations = ee.FeatureCollection("FAO/GAUL/2015/level0");



// Filter Spain from the Nations dataset

var spain_area = Nations.filter(ee.Filter.eq('ADM0_NAME', 'Spain'));



// Extract the geometry of Spain

var spain_geometry = spain_area.geometry();



// Define the Ariagona Islands as the intersection of a triangle and Spain's geometry

var Ari_islands_triangle = ee.Geometry.Polygon(

    [[[-16, 29.4], [-16, 27.5], [-18.5, 27.5], [-16, 29.4]]]

);



var Ari_islands = Ari_islands_triangle.intersection(spain_geometry);



// Create a buffer region around the Ariagona Islands

var bufferDistance = 5000; // in meters (5 km)

var boundingRegion = Ari_islands.buffer(bufferDistance);



// Add the Ariagona Islands to the map

Map.addLayer(Ari_islands_triangle, {color: 'black'}, 'Ariagona Islands');

//Map.addLayer(boundingRegion, {color: 'black', opacity: 0.3}, 'Bounding Region');

//Map.centerObject(boundingRegion, 8);



////////////////////////////

////   Time Period & Area   ////

////////////////////////////



// Define the time range from 2015 to 2024

var startDate = ee.Date('2015-01-01');

var endDate = ee.Date('2024-12-31');

var DRange_S = ee.DateRange(startDate, endDate);



////////////////////////////

////   Masking & Subset S-2   ////

////////////////////////////



// Cloud masking function

function maskS2clouds(image) {

    var qa = image.select('QA60');

    var cloudBitMask = 1 << 10;

    var cirrusBitMask = 1 << 11;

    var mask = qa.bitwiseAnd(cloudBitMask).eq(0)

                .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

    return image.updateMask(mask).divide(10000)

                .copyProperties(image, ['system:time_start']);

}



// Filter the dataset

var s2_data = s2_2A.filterBounds(Ari_islands_triangle)

                  .filterDate(DRange_S)

                  .filter(ee.Filter.calendarRange(6, 11, 'month'))  // Filter for months from June to November

                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 40))

                  .map(maskS2clouds)

                  .map(function(image) {

                      return image.clip(boundingRegion);

                  })

                  .sort('system:time_start', true);



////////////////////////////

////   Process S-2 Indices   ////

////////////////////////////



// Functions to calculate indices

var addNDVI = function(image) {

    var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');

    return image.addBands(ndvi);

};



var addNDMI = function(image) {

    var ndmi = image.normalizedDifference(['B8', 'B11']).rename('NDMI');

    return image.addBands(ndmi);

};



var addEVI = function(image) {

    var evi = image.expression(

        '(2.5 * ((NIR - RED)) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {

            'NIR': image.select('B8'),

            'RED': image.select('B4'),

            'BLUE': image.select('B2')

        }).rename('EVI');

    return image.addBands(evi);

};



var addSAVI = function(image) {

    var savi = image.expression(

        '((NIR - RED) / (NIR + RED + 0.5)) * 1.5', {

            'NIR': image.select('B8'),

            'RED': image.select('B4')

        }).rename('SAVI');

    return image.addBands(savi);

};



var addTCV = function(image) {

    var veg = image.expression(

        '-0.2848 * Blue - 0.2435 * Green - 0.5436 * Red + 0.7243 * NIR + 0.0840 * SWIRI - 0.1800 * SWIRII', {

            Blue: image.select('B2'),

            Green: image.select('B3'),

            Red: image.select('B4'),

            NIR: image.select('B8'),

            SWIRI: image.select('B11'),

            SWIRII: image.select('B12')

        }).rename('TC_Veg');

    return image.addBands(veg);

};



var addTCW = function(image) {

    var wet = image.expression(

        '0.1509 * Blue + 0.1973 * Green + 0.3279 * Red + 0.3406 * NIR - 0.7112 * SWIRI - 0.4572 * SWIRII', {

            Blue: image.select('B2'),

            Green: image.select('B3'),

            Red: image.select('B4'),

            NIR: image.select('B8'),

            SWIRI: image.select('B11'),

            SWIRII: image.select('B12')

        }).rename('TC_Wet');

    return image.addBands(wet);

};



// Apply the functions and reduce the data

var survey = s2_data.map(addNDVI)

                      .map(addNDMI)

                      .map(addEVI)

                      .map(addSAVI)

                      .map(addTCV)

                      .map(addTCW);



////////////////////////////

////   Reduce & Export   ////

////////////////////////////



var reducers = [

    {name: 'NDVI', band: 'NDVI'},

    {name: 'NDMI', band: 'NDMI'},

    {name: 'EVI', band: 'EVI'},

    {name: 'SAVI', band: 'SAVI'},

    {name: 'TC_Veg', band: 'TC_Veg'},

    {name: 'TC_Wet', band: 'TC_Wet'}

];



reducers.forEach(function(index) {

    var name = index.name;

    var band = index.band;

    

    var reducedImage = survey.select(band).reduce(ee.Reducer.mean());

    

    Export.image.toDrive({

        image: reducedImage,

        description: name,

        folder: 'Environmental_Variables', // Adjust to your Google Drive folder

        region: Ari_islands_triangle,

        scale: 50,

        fileFormat: 'GeoTIFF',

        maxPixels: 1e13

    });

});
